---
title: "Demo"
format: hugo
# format:
#   html:
#     code-fold: true
#     code-copy: true
#     code-overflow: wrap
editor: source
execute:
  message: false
---

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| label: setup
#| echo: true
#| code-fold: show
#| message: false
library(sostools)
library(contrastable)
library(ordinal)
library(tidyverse)
```

Here is an example of a 6-point rating scale where using a `logit` link would not serve us well, and a different choice of link function is needed.

```{r}
#| label: happiness-data
#| echo: true
#| message: false
conf_data <- 
  read_csv(r"(C:\Users\Thomas\Downloads\data_Mazor_2020.csv)") |> 
  filter(!is.nan(Confidence)) |> 
  mutate(Confidence = ordered(Confidence,levels=1:6),
         Subj_idx = factor(Subj_idx),
         Condition = factor(Condition))

head(conf_data)
```

What does the data look like? If we look closely we can see that there is a higher proportion of the higher scale values. I'll plot this in two different ways.

```{r}
#| label: cloglog-data
#| fig-subcap: 
#|   - "Proportion of scale responses for each value and condition, the bars add up to 1"
#|   - "The same proportions, but stacked to better show the high-value skew in the data"
#| layout-ncol: 2
#| column: page
#| message: false
aggregate_proportions <- 
  conf_data |> 
  group_by(Confidence, Condition) |> 
  summarize(count = n()) |> 
  group_by(Condition) |> 
  mutate(proportion = count / sum(count))

aggregate_proportions |> 
  ggplot(aes(x = Confidence, y = proportion, fill = Condition)) +
  geom_col(position=position_dodge(width=.9)) +
  theme_bw(base_size = 18)

aggregate_proportions |> 
ggplot(aes(y = Condition, x = proportion, fill=forcats::fct_rev(Confidence))) +
  geom_col() +
  scale_fill_brewer(palette = 'BrBG',
                    direction = -1)+
  theme_minimal(base_size=18) +
  theme(legend.position = 'none') 
```

What are the odds of going from one rating to the next? How do those odds change at each threshold between ratings? If we use the symmetric logit link, our cumulative odds ratios would look like the figure below.

```{r}
xtable <- xtabs(~Condition + Confidence, data=conf_data)

sostools::odds_ratios(xtable) |> 
  ggplot(aes(x = odds_ratio, 
             y = log_odds_ratio, 
             ymin = log.confint.low,
             ymax = log.confint.high)) +
  geom_pointrange() +
  theme_bw(base_size = 18)
```

This doesn't look like it meets the proportional odds assumption with the logit link. As you go towards the lower end of the scale, the odds ratios decrease dramatically. This would reflect that the lower scale values are used less, and those unconfident responses are reallocated towards the higher end (which already had a lot of responses). If we fit a cumulative model of proportional odds form with the logit link, it will give us an effect estimate, but we can compare this to the results of separate logistic regressions along each threshold. This is essentially the model-fitting analogue of the manual calculation of the log odds we already found from the empirical data, notice the same results.

```{r}
#| label: logit-link-propodds
#| message: false
ord_mdl <- clm(Confidence ~ Condition,
               data = conf_data,
               link = "logit")
summary(ord_mdl)

propodds <- test_propodds(conf_data, Confidence ~ Condition, ord_mdl,.link = 'logit')
plot_propodds(propodds) +
  theme_minimal(base_size=18) +
  theme(legend.position = 'none')
```

Clearly these do not meet the proportional odds assumption for the logit link. We can use the `cloglog` link to capture how there are more higher values than lower values. This will give us different estimates for the thresholds and the effect of Condition because the cumulative distribution function is different.

```{r}
#| message: false
ord_mdl <- clm(Confidence ~ Condition,
               data = conf_data,
               link = "cloglog")
summary(ord_mdl)

propodds <- test_propodds(conf_data, Confidence ~ Condition, ord_mdl,.link = 'cloglog')
plot_propodds(propodds) +
  theme_minimal(base_size=18) +
  theme(legend.position = 'none')
```

This link function fits much better. You may notice that the highest threshold is noticeably lower than all the others, but the confidence interval is still well within the prediction from the ordinal model.
